@Library('my-shared-library') _

pipeline{

    agent any

    parameters{

        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        string(name: 'aws_account_id', description: "account id of aws", defaultValue: '435951944183')
        string(name: 'region', description: "region", defaultValue: 'us-west-2')
        string(name: 'ecr_repoName', description: "ECR repository name", defaultValue: 'minnu')
    }

    stages{
         
        stage('Git Checkout'){
                    when { expression {  params.action == 'create' } }
            steps{
            gitCheckout(
                branch: "main",
                url: "https://github.com/MinnuAntony/SpringBoot-Sample"
            )
            }
        }
        //  stage('Unit Test maven'){
         
        //  when { expression {  params.action == 'create' } }

        //     steps{
        //        script{
                   
        //            mvnTest()
        //        }
        //     }
        // }
        //  stage('Integration Test maven'){
        //  when { expression {  params.action == 'create' } }
        //     steps{
        //        script{
                   
        //            mvnIntegrationTest()
        //        }
        //     }
        // }

        // stage('Static code analysis: Sonarqube'){
        //  when { expression {  params.action == 'create' } }
        //     steps{
        //        script{
                   
        //            def SonarQubecredentialsId = 'sonar-api-new3'
        //            staticCodeAnalysis(SonarQubecredentialsId)
        //        }
        //     }
        // }

        // stage('Quality Gate Status Check : Sonarqube'){
        //  when { expression {  params.action == 'create' } }
        //     steps{
        //        script{
                   
        //            def SonarQubecredentialsId = 'sonar-api-new3'
        //            qualityGateStatus(SonarQubecredentialsId)
        //        }
        //     }
        // }
        stage('Maven Build : maven'){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   mvnBuild()
               }
            }
        }

        stage('Docker image build for ECR'){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   def aws_account_id = params.aws_account_id
                   def region = params.region
                   def ecr_repoName = params.ecr_repoName
                   dockerBuild(aws_account_id, region, ecr_repoName)
               }
            }
        }

        stage('Docker image scan for ECR'){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   def aws_account_id = params.aws_account_id
                   def region = params.region
                   def ecr_repoName = params.ecr_repoName
                   dockerImageScan(aws_account_id, region, ecr_repoName)
               }
            }
        }

        stage('Docker image push into ECR'){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   def aws_account_id = params.aws_account_id
                   def region = params.region
                   def ecr_repoName = params.ecr_repoName
                   dockerImagePush(aws_account_id, region, ecr_repoName)
               }
            }
        }


    }
}